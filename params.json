{"name":"Phonydata","tagline":"A fake/mock data library written in groovy (dbunit alternative)","body":"PhonyData\r\n=========\r\n\r\n[![Build Status](https://travis-ci.org/jeffskj/phonydata.svg?branch=master)](https://travis-ci.org/jeffskj/phonydata)\r\n\r\nPhonyData is a library to import and export test datasets for things like unit testing databases or local dev data. \r\n\r\nFeatures\r\n--------\r\n\r\n  * Clear, consise groovy based DSL to define datasets\r\n  * Can both import and export data\r\n  * Automatically escapes sql keywords\r\n  * Automatically topologically sorts tables with foreign keys\r\n  * Auto column sensing\r\n  * Specify default column values\r\n  * ID auto generation\r\n  * Row references\r\n  * Define dataset inline in groovy tests \r\n  * Concise builder pattern to import/export data\r\n  * Reads DBUnit FlatXml datasets for compatibility\r\n\r\nDSL Overview\r\n------------\r\n  * call an undefined method or reference a property to specify a table\r\n  * Groovy map syntax to pass column values `my_table(id:1, column1: 'test')`\r\n  * Specify an ID column to enable row references or auto id incrementing `my_table.id('id')`\r\n  * Specify defaults column values `my_table.defaults(some_column:'default value', column1: 'default')`\r\n\r\nDSL Example\r\n-----------\r\n\r\n    // specify id columns\r\n    address.id('id') \r\n    people.id('id')\r\n    \r\n    // specify columns that will be the same for all rows\r\n    people.defaults(birthday: new Date())\r\n    \r\n    people(name: 'Jane Doe')\r\n    \r\n    100.times { n ->\r\n        def person = people(name: 'joe blow' + n) // returns reference to row which will be de-referenced by id\r\n        \r\n        address(street: \"$n main st\".toString(), city: 'seattle', state: 'wa', \r\n                person: person /* holds actual value of person.id */)\r\n                \r\n        address(street: \"$n oak st\".toString(), city: 'seattle', state: 'wa', person: person)    \r\n    }\r\n    \r\nUsage Example\r\n-------------\r\n    \r\n    DataSource datasource = ... // get reference to JDBC DataSource\r\n    def dataset = getClass().classLoader.getResourceAsStream('/path/to/dataset') // may also be a String\r\n    PhonyData.from(dataset).into(datasource) // reads data from groovy dataset and writes to datasource\r\n    \r\n    // reads the data from specified tables and writes a groovy dataset to output stream\r\n    PhonyData.from(datasource, ['table1','table2']).into(new File('/some/file').newOutputStream())\r\n\r\n   \r\nInline Groovy Example\r\n---------------------\r\n\r\n     @Before\r\n     public void setup() {     \r\n        PhonyData.from {\r\n            people(name: 'Jane Doe')\r\n            address(street: '123 main st')\r\n        }.into(dataSource)\r\n    }\r\n\r\nGet It!\r\n-------\r\n\r\nAdd this dependency to your project:\r\n\r\n    <dependency>\r\n       <groupId>io.github.phonydata</groupId>\r\n       <artifactId>phonydata</artifactId>\r\n       <version>0.2</version>\r\n    </dependency>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}